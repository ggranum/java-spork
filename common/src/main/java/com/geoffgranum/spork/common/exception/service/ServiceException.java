/*
 * This software is licensed under the MIT License.
 *
 * Copyright (c) 2019 Geoff M. Granum
 */
package com.geoffgranum.spork.common.exception.service;

import com.geoffgranum.spork.common.exception.FormattedException;
import com.geoffgranum.spork.common.exception.HttpResponseAware;
import com.geoffgranum.spork.common.log.Level;
import com.geoffgranum.spork.common.log.Log;
import org.apache.http.HttpStatus;

/**
 * An Error in response to a Client Request. Throwing this error indicates that the calling class may have some
 * clean up left to do.
 * <p>
 * Any ServiceException that makes it all the way back to the invoking entry point (e.g. the service class) without
 * being marked as handled is an internal failure to correctly manage error states.
 * <p>
 * Also, any error that is NOT ServiceException that makes it back to the invoking entry point also indicates
 * a failure to properly handle errors.
 * <p>
 * By 'handled', we mean that the response sent to the client isn't generated by the Framework: e.g. the error is caught, a response code set, and an
 * error message (specific to the thrown ServiceException or not) is added.
 *
 * @author Geoff M. Granum
 */
public class ServiceException extends FormattedException implements HttpResponseAware {

  private static final long serialVersionUID = 1L;

  private int statusCode = HttpStatus.SC_INTERNAL_SERVER_ERROR;

  private boolean hasBeenLogged;

  public ServiceException(String msgFormat, Object... args) {
    super(null, msgFormat, args);
  }

  public ServiceException(Throwable cause, String msgFormat, Object... args) {
    super(String.format(msgFormat, args), cause);
  }

  public ServiceException(int statusCode, String msgFormat, Object... args) {
    super(String.format(msgFormat, args));
    this.statusCode = statusCode;
  }

  public ServiceException(Throwable cause, int statusCode, String msgFormat, Object... args) {
    super(cause, msgFormat, args);
    this.statusCode = statusCode;
  }

  @Override
  public int httpResponseCode() {
    return statusCode;
  }

  @Override
  public String getHttpResponseMessage() {
    return getMessage();
  }

  public void log() {
    if(!hasBeenLogged) {
      hasBeenLogged = true;
      Log.log(getLogLevel(), shouldPrintStack(), getClass(), this, getLogMessage());
    }
  }

  public Level getLogLevel() {
    return Level.ERROR;
  }

  public String getLogMessage() {
    return getMessage();
  }

  public boolean shouldPrintStack() {
    return true;
  }

  public ServiceException withStatusCode(int statusCode) {
    this.statusCode = statusCode;
    return this;
  }
}
 
